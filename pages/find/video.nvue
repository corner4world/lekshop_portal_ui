<template>
	<view>
		<view class="fixed-top h-46 flex f-r bg-color-t box-c"  :style="{ 'padding-top': top + 'px' }">
			<view @click="back(1)" class="flex f-a-c f-r f-s-0 padding-lr10 van-icon van-icon-arrow-left t-color-w f20-size"></view>
			<xcx-header></xcx-header>
		</view>
		<!-- 注意：这是 H5、微信小程序界面，请勿和 new_index.nvue、index.nvue 混用
		 
		1. new_index.nvue、index.nvue这两个是App页面
		 
		2. 另外：data.js 是上一版本留下的假数据，这一版改成了 URL 请求了（如不需要可以删除，也可作为后端请求参考）
		 
		3. 请各位大神多多留手，我已经把请求内存开到最大了
		 
		4. 视频 id 切记是字符串类型  -->
		 <view v-if="isShowAixin" class="flex f-a-c f-j-c van-icon van-icon-like-o" :style="'position: fixed; margin-left: '+ aixinLeft +'px; margin-top: '+ aixinTop +'px; width: 70px; height: 65px; transform: rotate('+ Rotate +'deg);'"></view>
		<swiper :style="'width: '+ windowWidth +'px; height: '+ windowHeight +'px; background-color: #000000;'" :vertical="true" @animationfinish="animationfinish" @change="change" :current="current" :indicator-dots="false">
			<swiper-item v-for="(list,index) in dataList">
				<view>
					<!-- 
					1.v-if：用于控制视频在节点的渲染数
					2.muted的默认值是 false，代表默认是禁音视频的
					3.http-cache默认开启视频缓存
					4.poster（封面（方案一））：这里的封面默认处理存储在阿里云的视频
					5.show-loading：这里默认去掉播放转圈的标志
					v-if="Math.abs(k-index)<=1"
					 -->
					<video
					v-if="Math.abs(k-index)<=1"
					:ref="'item'+index"
					:id="'video'+list._id"
					:loop="true"
					:muted="list.isplay"
					:controls="false"
					:http-cache="true"
					:page-gesture="false"
					:show-fullscreen-btn="false"
					:show-loading="false"
					:show-center-play-btn="false"
					:enable-progress-gesture="false"
					:src="list.videoUrl"
					object-fit="cover"
					@play="playEvent"
					@ended="ended"
					@click="tapVideoHover(list.state,$event)"
					:style="'width: '+ windowWidth +'px; height: '+ windowHeight +'px; background-color: #000000;'"
					:poster="list.videoUrl+'?vframe/jpg/offset/0/w/'+windowWidth*2"
					></video>
					<!-- 
					1.这里是封面（方案二）：这里的封面可以自定义。
					2.也在代码中做了批注，两种方案可以共存，不会相互影响。
					-->
					<image
					v-if="!list.playIng"
					:src="list.videoUrl+'?vframe/jpg/offset/0/w/'+windowWidth*2"
					:style="'width: '+ windowWidth +'px; height: '+ windowHeight +'px; position: absolute;'"
					mode="aspectFit"
					></image>
				</view>
				<!-- 播放状态：pause 的时候就会暂停 -->
				<view class="videoHover" @click="tapVideoHover(list.state,$event)" @touchstart="touchstartHover" :style="'width: '+ windowWidth +'px; height: '+ windowHeight +'px;'">
					<!-- <image v-if="list.state=='pause'" class="playState" src="@/static/img/index/play.png"></image> -->
					<view v-if="list.state=='pause'"  class="flex f-a-c f-j-c van-icon van-icon-play playState  t-color-w" style="font-size: 70px;"></view>
				</view>
				<view class="userInfo">
					<!-- 1.头像 -->
					<image @click="go('/pages/find/user?id='+list.walkMemberId)" class="userAvatar" :src="list.walkMemberHeadImg" mode="aspectFill"></image>
					<!-- 2.点赞 -->
					<view @click="like(index);" style="opacity: 0.9; margin-top: 17px;">
						<view v-if="list.collectTrends" class="flex f-a-c f-j-c van-icon van-icon-like t-color-r f32-size" style="width: 40px; height: 40px; position: absolute; right: 6px;"></view>
						<view v-if="!list.collectTrends" class="flex f-a-c f-j-c van-icon van-icon-like-o t-color-w f32-size" style="width: 40px; height: 40px; position: absolute; right: 6px;"></view>
						<text class="f12-size f-w-500" style="color: #FFFFFF; text-align: center; margin-top: 40px;" :class="{'likeNumActive':list.like}">{{list.collectionNum}}</text>
					</view>
					<!-- 3.评论 -->
					<view class="comment" @click="toComment(index)" style="opacity: 0.9; margin-top: 17px;">
						<view class="flex f-a-c f-j-c van-icon van-icon-chat-o f32-size t-color-w" style="width: 35px; height: 35px; position: absolute; right: 7px;"></view>
						<text style="color: #FFFFFF; margin-top: 5px; font-size: 14px; font-weight: bold; text-align: center; margin-top: 40px;">{{list.commentNum}}</text>
					</view>
					<!-- 4.分享 -->
					<view @click="shareVideo" style="opacity: 0.9; margin-top: 17px;">
						<view class="flex f-a-c f-j-c van-icon van-icon-share f32-size t-color-w" style="width: 40px; height: 40px; position: absolute; right: 5px;"></view>
						<text class="f-w-500 f12-size" style="color: #FFFFFF;  text-align: center;  margin-top: 40px;">{{i18n['分享']}}</text>
					</view>
				</view>
				<!-- 最底下的文字部分 -->
				<view class="content">
					<text class="userName" :style="'width: '+ (windowWidth - 90) +'px;'">{{list.walkMemberName}}</text><!-- i={{i}} -->
					<text class="words" :style="'width: '+ (windowWidth - 90) +'px;'">{{list.content}}</text><!-- k={{k}} -->
					
					<view @click="showGoods(allList[index]['trendsGoodsList'])" v-if="allList[index] && allList[index]['trendsGoodsList'].length > 0" class=" b-bottom flex f-a-c f-r f-j-s">
						<text class="flex f-a-c f11-size t-color-w" style="opacity: 0.5;">{{i18n['查看Ta提到的宝贝']}}</text>
						<view class="flex f-a-c f-r padding-tb6">
							<view class="w-30 h-30 b-radius-2 bg-img  b-radius-2 margin-r4" :style="allList[index]['trendsGoodsList'][0]['goodsMainImg'] | bgimg(300)+''"></view>
							<view class="flex f-a-c f-j-c van-icon van-icon-arrow t-color-9 f15-size"></view>
						</view>
					</view>
				</view>
			</swiper-item>
		</swiper>
		<view v-if="dataList.length <= 0" class="wrap-layout flex f-c f-a-c f-j-c">
			<text class="t-color-w">{{i18n['暂时无人发布视频']}}</text>
			<view @click="go('/pages/find/issue?type=1')" class="flex f-r f-s-0 f-a-c f-j-c b-radius-5 t-color-w b-color-w h-32 w-100 margin-t16">
				<text class="flex f-a-c f-j-c f-s-0 van-icon van-icon-plus t-color-w margin-r4"></text>
				<text>{{i18n['立即发布']}}</text>
			</view>
		</view>
		<uni-popup ref="goods" type="bottom">
			<view class="wrap-popup-radius bg-color-w padding-lr12">
				<view class="flex f-r f-a-c f-j-c b-bottom f15-size f-w-b padding-tb12">{{i18n['Ta提到的商品']}}</view>
				<view @click="go('/pages/shops/detail?id='+item.goodsId)" v-for="(item,index) in goodsList" class="padding-tb10 flex f-r">
					<view class="flex f-s-0 w-80 h-80 b-radius-5 bg-img margin-r12" :style="item.goodsMainImg | bgimg(300)+''"></view>
					<view class="flex flex-1 f-c f-j-s">
						<view class="f12-size line2 f-w">{{item.goodsName}}</view>
						<view class="text-price t-color-y flex f-r">{{item.price}}</view>
					</view>
				</view>
				<view class="padding-30"></view>
			</view>
		</uni-popup>
		<comment-list ref="comment" @pjlisy="changeComment" :findId="commentId"></comment-list>
	</view>
</template>

<script>
	import commentList from './components/pjlist.vue';
	const API = require('../../utils/api/find.js').default;
	const $ = require('../../utils/api.js');
	export default {
		data() {
			return {
				top: uni.getStorageSync('bartop') ? uni.getStorageSync('bartop') : 0,
				isIphonex: uni.getStorageSync('isIphonex') ? uni.getStorageSync('isIphonex') : false,
				windowWidth: 0,
				windowHeight: 0,
				platform: "",
				deleteHeight: 0,
				dataList: [],
				k: 0,
				oldVideo: "",
				voice: "",
				timeout: "",
				current: 0,
				boxStyle:{//视频，图片封面样式🌟💗
					'height': 0,
					'width': 0,
				},
				
				
				// 双击点赞参数
				touchNum: 0,
				aixinLeft: 0,
				aixinTop: 0,
				isShowAixin: false,
				Rotate: 0,
				allList: [],
				page: 1,
				pageSize: 20,
				totalPage: 1,
				commentId: '',
				goodsList: [],
				id: '',
				userId: '',
			}
		},
		watch:{
			k(k,old_k){
				console.log(k,old_k,'k')
				this.dataList[old_k].state = 'stop'//如果是被滑走的视频，就停止播放
				this.dataList[old_k].playIng = false//如果视频暂停，就加载封面
				this.dataList[old_k].isplay = true
				uni.createVideoContext('video'+this.dataList[old_k]._id,this).play()
				clearTimeout(this.oldVideo)
				this.oldVideo = setTimeout(()=>{
					uni.createVideoContext('video'+this.dataList[old_k]._id,this).seek(0)
					uni.createVideoContext('video'+this.dataList[old_k]._id,this).pause()
					console.log('预留第' + (old_k + 1) + '个视频：' + 'video'+this.dataList[old_k]._id)
				},500)
				// 2.0版本已经去掉了下面这一句，视频不用暂停，只需要把声音禁止就行
				//uni.createVideoContext('video'+this.dataList[old_k]._id + '' + old_k,this).stop()//如果视频暂停，那么旧视频停止，这里的'video'+this.dataList[old_k]._id + '' + old_k，后面加 old_k 是为了每一个视频的 id 值不同，这样就可以大程度的避免串音问题
				uni.createVideoContext('video'+this.dataList[k]._id,this).play();
				console.log('已经暂停 --> 第' + (old_k + 1) + '个视频～')//提示
				clearTimeout(this.voice)
				this.voice = setTimeout(()=>{
					this.dataList[k].isplay = false
				},300)
				setTimeout(()=>{
					this.dataList[k].playIng = true
				},850)
				
				//【2.0版本更新内容】- start
				var p = k
				++p
				setTimeout(()=>{
					uni.createVideoContext('video'+this.dataList[p]._id,this).play()
					this.dataList[p].isplay = true
				},20)
				clearTimeout(this.timeout)
				this.timeout = setTimeout(()=>{
					uni.createVideoContext('video'+this.dataList[p]._id,this).seek(0)
					uni.createVideoContext('video'+this.dataList[p]._id,this).pause()
					console.log('预加载第' + (p + 1) + '个视频：' + 'video'+this.dataList[p]._id)
				},1500)
				//【2.0版本更新内容】- end
			}
		},
		onLoad(options) {
			this.id = options.id ? options.id : '';
			this.userId = options.userId ? options.userId : '';
			this.platform = uni.getSystemInfoSync().platform
			var model = uni.getSystemInfoSync().model
			if(this.platform == 'ios' && (model !== 'iPhone6' || model !== 'iPhone6s' || model !== 'iPhone7' || model !== 'iPhone8')){
				this.deleteHeight = 0//有 tabbar的 修改这里可以改变视频高度
			}
			this.windowWidth = uni.getSystemInfoSync().windowWidth
			this.windowHeight = uni.getSystemInfoSync().windowHeight
			this.boxStyle.width = this.windowWidth + 'px'//给宽度加px
			this.boxStyle.height = this.windowHeight - this.deleteHeight;//有 tabbar的 修改这里可以改变视频高度
			this.get() //刚进入页面加载数据
		},
		onShow(){
			console.log('回到前台');
			if(this.dataList.length !== 0){
				this.dataList[this.k].state = 'play';
				uni.createVideoContext('video'+this.dataList[this.k]._id,this).play()
			}
		},
		onHide(){
			if(this.dataList.length<=0){return;}
			this.dataList[this.k]['state'] = 'pause';//界面隐藏也要停止播放视频
			uni.createVideoContext('video'+this.dataList[this.k]._id,this).pause();//暂停以后继续播放
			console.log('到后台');
		},
		onUnload() {
			
		},
		methods: {
			playEvent() {//避免what没监听到
				this.$set(this.dataList[this.k],'isplay',false);
				this.$set(this.dataList[this.k],'playIng',true);
			},
			showGoods(list) {
				this.goodsList = list;
				this.$refs.goods.open();
			},
			ended(){
				// 1.播放当前视频结束时触发，自动切换下一个视频
				// this.current = this.k+1
			},
			// 双击点赞效果
			touchstartHover(event){
				if(this.touchNum >= 1){
					// console.log('双击 -- X坐标：'+ event.touches[0].screenX);
					// console.log('双击 -- Y坐标：'+ event.touches[0].screenY);
					this.aixinLeft = event.touches[0].screenX - 50;
					this.aixinTop =  event.touches[0].screenY - 50;
					this.isShowAixin = true;
					let max = 40; let min = -40;
					this.Rotate = Math.floor(Math.random() * (max - min + 1)) + min;
					setTimeout(()=>{
						this.isShowAixin = false;
					},700)
				}
			},
			//点击播放&&暂停
			tapVideoHover(state,event){
				this.dataList[this.k].isShowimage = false
				this.dataList[this.k].isShowProgressBarTime = false
				this.ProgressBarOpacity = 0.5
				this.dotWidth = 0
				console.log('state--',state);
				// 1.启用双击点赞 --- start
				this.touchNum++;
				setTimeout(()=>{
					if(this.touchNum == 1){
						if(state=='play'||state=='continue'){
							this.dataList[this.k].state = 'pause';
						}else{
							this.dataList[this.k].state = 'continue';
						}
						if(this.dataList[this.k].state == 'continue'){
							uni.createVideoContext('video'+this.dataList[this.k]._id,this).play();//暂停以后继续播放
						}
						if(this.dataList[this.k].state == 'pause'){
							uni.createVideoContext('video'+this.dataList[this.k]._id,this).pause();//暂停以后继续播放
						}
					}
					if(this.touchNum >= 2){
						this.doubleLike();
					}
					this.touchNum = 0;
				},200)
				// --------------- ending
				// 2. 不启用双击点赞 start
				// if(state=='play'||state=='continue'){
				// 	this.dataList[this.k].state = 'pause';
				// }else{
				// 	this.dataList[this.k].state = 'continue';
				// }
				// if(this.dataList[this.k].state == 'continue'){
				// 	uni.createVideoContext('video'+this.dataList[this.k]._id,this).play();//暂停以后继续播放
				// }
				// if(this.dataList[this.k].state == 'pause'){
				// 	uni.createVideoContext('video'+this.dataList[this.k]._id,this).pause();//暂停以后继续播放
				// }
				// --------------- ending
			},
			doubleLike(){
				if(this.dataList[this.k].like == false){
					this.dataList[this.k].like_n += 1;
					this.dataList[this.k].like = true;
				}
				/*
				点赞
				*/
			},
			change(event){
				this.k = event.detail.current
			},
			animationfinish(event){
				// 1.这里进行判断，如果是最后一个视频就进入 get() 方法加载视频进入列表
				if(this.k == this.dataList.length - 1){
					if(this.page < this.totalPage) {
						this.page += 1;
						this.GET()
					}
				}
			},
			//每一组结束时新的请求
			GET(){
				const self = this;
				$.ajax({
					url: API.detailListApi,
					data: {
						page: self.page,
						pageSize: self.pageSize,
						trendsId: self.id,
						trendsType: 2,//	1文案类>>2视频类
						walkMemberId: self.userId,
					},
					method: 'GET',
					success(res) {
						let list = res.data.list ? res.data.list : [];
						self.totalPage = res.data.totalPage;
						if(list.length <= 0){return;}
						// 2.这里把视频添加到视频列表
						for (let i = 0; i < list.length; i++) {
							let obj = list[i]['walkTrends'];
							obj['_id']= obj.id;
							obj['state']= '';
							obj['playIng']= false;
							obj['isplay']= false;
							obj['collectTrends']= list[i]['collectTrends'];
							obj['collectWalkMember']= list[i]['collectWalkMember'];
							self.dataList.push(obj);
							self.allList.push(list[i])
						}
						
					}
				})
				
			},
			get(){
				// 1.这里引入后端请求数据
				const self = this;
				$.ajax({
					url: API.detailListApi,
					data: {
						page: self.page,
						pageSize: self.pageSize,
						trendsId: self.id,
						trendsType: 2,//	1文案类>>2视频类
						walkMemberId: self.userId,
					},
					method: 'GET',
					success(res) {
						let list = res.data.list ? res.data.list : [];
						self.totalPage = res.data.totalPage;
						if(list.length <= 0){return;}
						// 2.这里把视频添加到视频列表
						for (let i = 0; i < list.length; i++) {
							let obj = list[i]['walkTrends'];
							obj['_id']= obj.id;
							obj['state']= '';
							obj['playIng']= false;
							obj['isplay']= false;
							obj['collectTrends']= list[i]['collectTrends'];
							obj['collectWalkMember']= list[i]['collectWalkMember'];
							self.dataList.push(obj);
							self.allList.push(list[i])
						}
						
						self.dataList[0].state = "play";
						setTimeout(()=>{
							//这里的延迟是为了避免执行时间太快而直接跳过执行的 bug
							uni.createVideoContext('video'+self.dataList[0]._id,self).seek(0)
							uni.createVideoContext('video'+self.dataList[0]._id,self).play()
						},200)
						self.dataList[0].isplay = false
						setTimeout(()=>{
							self.dataList[0].playIng = true
						},500)
						var p = 0
						setTimeout(()=>{
							++p
							uni.createVideoContext('video'+self.dataList[p]._id,self).play()
							self.dataList[p].isplay = true
							setTimeout(()=>{
								uni.createVideoContext('video'+self.dataList[p]._id,self).seek(0)
								uni.createVideoContext('video'+self.dataList[p]._id,self).pause()
								console.log('预加载第' + (p + 1) + '个视频：' + 'video'+self.dataList[p]._id)
							},2000)
						},50)
						
					}
				})
			},
			shareVideo(){
				uni.showToast({
					title: '分享',
					icon: 'none'
				})
			},
			changeComment(type) {
				this.dataList[this.k]['commentNum'] += 1;
			},
			toComment(index){
				this.commentId = this.allList[index]['walkTrends']['id'];
				this.$refs.comment.open();
				this.$refs.comment.init(this.commentId);
			},
			like(index) {
				const self = this;
				let info = self.dataList[index];
				$.ajax({
					url: API.likeFindApi,
					data: {
						trendsId: info.id
					},
					method: 'POST',
					success(res) {
						$.$toast(self.i18n['操作成功']);
						info.collectTrends = !info.collectTrends;
						if(info.collectTrends){
							info.collectionNum += 1;
						}else{
							info.collectionNum -= 1;
						}
						self.dataList[index] = info;
					}
				})
			},
		},
		computed: {
			i18n() {
				return this.$t('find')
			},
		},
		components:{commentList}
	}
</script>

<style scoped>
	
	.fixed-top {
		z-index: 9999;
	}
	.wrap-layout {
		position: fixed!important;
	}
	.container {background-color: #000000;}
	.item {
		/* width : 750rpx; */
		background-color: #000000;
		position: relative;
	}
	.videoHover{
		position: absolute;
		top: 0;
		left: 0;
		flex: 1;
		background-color: rgba(0,0,0,0.1);
		justify-content: center;
		align-items: center;
		
		/* border-style: dashed;
		border-color: #DD524D;
		border-width: 1px; */
	}
	.playState{
		width:  80px;
		height: 80px;
		opacity: 0.4;
	}
	.userInfo{
		position: absolute;
		bottom:110px;
		right: 10px;
		flex-direction: column;
		z-index: 1;
	}
	.userAvatar{
		border-radius: 500%;
		margin-bottom: 15px;
		border-style: solid;
		border-width: 2px;
		border-color: #ffffff;
	}
	.userAvatar{
		width : 100rpx;
		height: 100rpx;
	}
	.likeIco,.shareIco,.commentIco{
		width : 60rpx;
		height: 60rpx;
		margin-top: 15px;
	}
	.likeNum,.commentNum,.shareTex{
		color: #ffffff;
		font-size: 30rpx;
		text-align: center;
		margin: 5px;
	}
	.likeNumActive{
		color: red;
	}
	.content{
	  width: 720rpx;
	  z-index: 99;
	  position: absolute;
	  bottom: 30px;
	  /* justify-content: center; */
	  padding: 15rpx;
	  flex-direction: column;
	  justify-content: flex-start;
	  color: #ffffff;
	}
	.userName {
	  font-size: 30rpx;
	  color: #ffffff;
	  margin-top: 80upx;
	}
	.words {
	  margin-top: 10rpx;
	  font-size: 24rpx;
	  color: #ffffff;
	}
	.root{
		background-color: #000000;
	}
</style>
